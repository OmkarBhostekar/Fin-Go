// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package simplebank

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers(
    from_account_id,
    to_account_id,
    amount
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, from_account_id, to_account_id, amount, "createdAt"
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransferById = `-- name: DeleteTransferById :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTransferById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransferById, id)
	return err
}

const getAllTransfers = `-- name: GetAllTransfers :many
SELECT id, from_account_id, to_account_id, amount, "createdAt" FROM transfers
`

func (q *Queries) GetAllTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransferById = `-- name: GetTransferById :one
SELECT id, from_account_id, to_account_id, amount, "createdAt" FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransferById(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferById, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfersByFromAccountId = `-- name: GetTransfersByFromAccountId :many
SELECT id, from_account_id, to_account_id, amount, "createdAt" FROM transfers
WHERE from_account_id = $1
`

func (q *Queries) GetTransfersByFromAccountId(ctx context.Context, fromAccountID int64) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromAccountId, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByFromAccountIdAndToAccountId = `-- name: GetTransfersByFromAccountIdAndToAccountId :many

SELECT id, from_account_id, to_account_id, amount, "createdAt" FROM transfers
WHERE from_account_id = $1
AND to_account_id = $2
`

type GetTransfersByFromAccountIdAndToAccountIdParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

func (q *Queries) GetTransfersByFromAccountIdAndToAccountId(ctx context.Context, arg GetTransfersByFromAccountIdAndToAccountIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromAccountIdAndToAccountId, arg.FromAccountID, arg.ToAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByToAccountId = `-- name: GetTransfersByToAccountId :many
SELECT id, from_account_id, to_account_id, amount, "createdAt" FROM transfers
WHERE to_account_id = $1
`

func (q *Queries) GetTransfersByToAccountId(ctx context.Context, toAccountID int64) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByToAccountId, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
