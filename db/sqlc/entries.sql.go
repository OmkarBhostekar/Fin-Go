// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package simplebank

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries(
    account_id,
    amount
) VALUES (
    $1,
    $2
) RETURNING id, account_id, amount, "createdAt"
`

type CreateEntryParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntryById = `-- name: DeleteEntryById :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntryById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntryById, id)
	return err
}

const getAllEntries = `-- name: GetAllEntries :many
SELECT id, account_id, amount, "createdAt" FROM entries
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllEntriesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetAllEntries(ctx context.Context, arg GetAllEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryById = `-- name: GetEntryById :one
SELECT id, account_id, amount, "createdAt" FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntryById(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryById, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntryAmount = `-- name: UpdateEntryAmount :exec
UPDATE entries
SET amount = $1
WHERE id = $2
RETURNING id, account_id, amount, "createdAt"
`

type UpdateEntryAmountParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateEntryAmount(ctx context.Context, arg UpdateEntryAmountParams) error {
	_, err := q.db.ExecContext(ctx, updateEntryAmount, arg.Amount, arg.ID)
	return err
}
