// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/simplebank/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	simplebank "example.com/simplebank/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 simplebank.CreateAccountParams) (simplebank.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 simplebank.CreateEntryParams) (simplebank.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 simplebank.CreateTransferParams) (simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// DeleteAccountById mocks base method.
func (m *MockStore) DeleteAccountById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountById indicates an expected call of DeleteAccountById.
func (mr *MockStoreMockRecorder) DeleteAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountById", reflect.TypeOf((*MockStore)(nil).DeleteAccountById), arg0, arg1)
}

// DeleteEntryById mocks base method.
func (m *MockStore) DeleteEntryById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntryById indicates an expected call of DeleteEntryById.
func (mr *MockStoreMockRecorder) DeleteEntryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryById", reflect.TypeOf((*MockStore)(nil).DeleteEntryById), arg0, arg1)
}

// DeleteTransferById mocks base method.
func (m *MockStore) DeleteTransferById(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransferById indicates an expected call of DeleteTransferById.
func (mr *MockStoreMockRecorder) DeleteTransferById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferById", reflect.TypeOf((*MockStore)(nil).DeleteTransferById), arg0, arg1)
}

// GetAccountsCount mocks base method.
func (m *MockStore) GetAccountsCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsCount indicates an expected call of GetAccountsCount.
func (mr *MockStoreMockRecorder) GetAccountsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsCount", reflect.TypeOf((*MockStore)(nil).GetAccountsCount), arg0)
}

// GetAcountById mocks base method.
func (m *MockStore) GetAcountById(arg0 context.Context, arg1 int64) (simplebank.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcountById", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcountById indicates an expected call of GetAcountById.
func (mr *MockStoreMockRecorder) GetAcountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcountById", reflect.TypeOf((*MockStore)(nil).GetAcountById), arg0, arg1)
}

// GetAcountForUpdate mocks base method.
func (m *MockStore) GetAcountForUpdate(arg0 context.Context, arg1 int64) (simplebank.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcountForUpdate indicates an expected call of GetAcountForUpdate.
func (mr *MockStoreMockRecorder) GetAcountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAcountForUpdate), arg0, arg1)
}

// GetAllAccounts mocks base method.
func (m *MockStore) GetAllAccounts(arg0 context.Context, arg1 simplebank.GetAllAccountsParams) ([]simplebank.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", arg0, arg1)
	ret0, _ := ret[0].([]simplebank.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockStoreMockRecorder) GetAllAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockStore)(nil).GetAllAccounts), arg0, arg1)
}

// GetAllEntries mocks base method.
func (m *MockStore) GetAllEntries(arg0 context.Context, arg1 simplebank.GetAllEntriesParams) ([]simplebank.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntries", arg0, arg1)
	ret0, _ := ret[0].([]simplebank.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntries indicates an expected call of GetAllEntries.
func (mr *MockStoreMockRecorder) GetAllEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntries", reflect.TypeOf((*MockStore)(nil).GetAllEntries), arg0, arg1)
}

// GetAllTransfers mocks base method.
func (m *MockStore) GetAllTransfers(arg0 context.Context) ([]simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransfers", arg0)
	ret0, _ := ret[0].([]simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransfers indicates an expected call of GetAllTransfers.
func (mr *MockStoreMockRecorder) GetAllTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransfers", reflect.TypeOf((*MockStore)(nil).GetAllTransfers), arg0)
}

// GetEntryById mocks base method.
func (m *MockStore) GetEntryById(arg0 context.Context, arg1 int64) (simplebank.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryById", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryById indicates an expected call of GetEntryById.
func (mr *MockStoreMockRecorder) GetEntryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryById", reflect.TypeOf((*MockStore)(nil).GetEntryById), arg0, arg1)
}

// GetTransferById mocks base method.
func (m *MockStore) GetTransferById(arg0 context.Context, arg1 int64) (simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferById", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferById indicates an expected call of GetTransferById.
func (mr *MockStoreMockRecorder) GetTransferById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferById", reflect.TypeOf((*MockStore)(nil).GetTransferById), arg0, arg1)
}

// GetTransfersByFromAccountId mocks base method.
func (m *MockStore) GetTransfersByFromAccountId(arg0 context.Context, arg1 int64) ([]simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersByFromAccountId", arg0, arg1)
	ret0, _ := ret[0].([]simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersByFromAccountId indicates an expected call of GetTransfersByFromAccountId.
func (mr *MockStoreMockRecorder) GetTransfersByFromAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersByFromAccountId", reflect.TypeOf((*MockStore)(nil).GetTransfersByFromAccountId), arg0, arg1)
}

// GetTransfersByFromAccountIdAndToAccountId mocks base method.
func (m *MockStore) GetTransfersByFromAccountIdAndToAccountId(arg0 context.Context, arg1 simplebank.GetTransfersByFromAccountIdAndToAccountIdParams) ([]simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersByFromAccountIdAndToAccountId", arg0, arg1)
	ret0, _ := ret[0].([]simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersByFromAccountIdAndToAccountId indicates an expected call of GetTransfersByFromAccountIdAndToAccountId.
func (mr *MockStoreMockRecorder) GetTransfersByFromAccountIdAndToAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersByFromAccountIdAndToAccountId", reflect.TypeOf((*MockStore)(nil).GetTransfersByFromAccountIdAndToAccountId), arg0, arg1)
}

// GetTransfersByToAccountId mocks base method.
func (m *MockStore) GetTransfersByToAccountId(arg0 context.Context, arg1 int64) ([]simplebank.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersByToAccountId", arg0, arg1)
	ret0, _ := ret[0].([]simplebank.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersByToAccountId indicates an expected call of GetTransfersByToAccountId.
func (mr *MockStoreMockRecorder) GetTransfersByToAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersByToAccountId", reflect.TypeOf((*MockStore)(nil).GetTransfersByToAccountId), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 simplebank.TransferTxParams) (simplebank.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(simplebank.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockStore) UpdateAccountBalance(arg0 context.Context, arg1 simplebank.UpdateAccountBalanceParams) (simplebank.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(simplebank.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockStoreMockRecorder) UpdateAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalance), arg0, arg1)
}

// UpdateEntryAmount mocks base method.
func (m *MockStore) UpdateEntryAmount(arg0 context.Context, arg1 simplebank.UpdateEntryAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntryAmount indicates an expected call of UpdateEntryAmount.
func (mr *MockStoreMockRecorder) UpdateEntryAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryAmount", reflect.TypeOf((*MockStore)(nil).UpdateEntryAmount), arg0, arg1)
}
